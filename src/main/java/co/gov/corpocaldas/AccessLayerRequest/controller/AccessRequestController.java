package co.gov.corpocaldas.AccessLayerRequest.controller;

import co.gov.corpocaldas.AccessLayerRequest.dto.AccessRequestDto;
import co.gov.corpocaldas.AccessLayerRequest.dto.PaginatorDto;
import co.gov.corpocaldas.AccessLayerRequest.service.AccessRequestService;
import co.gov.corpocaldas.AccessLayerRequest.service.ValidateAccessService;
import co.gov.corpocaldas.AccessLayerRequest.service.util.ExcelExporter;
import co.gov.corpocaldas.AccessLayerRequest.service.util.PdfExporter;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import javax.mail.MessagingException;
import javax.servlet.http.HttpServletResponse;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("${api.base.url}/access-request")
@Api
public class AccessRequestController {

    private final AccessRequestService accessRequestService;
    
    private final ValidateAccessService validateAccessService;

    public AccessRequestController(AccessRequestService accessRequestService,
            ValidateAccessService validateAccessService) {
        this.accessRequestService = accessRequestService;
        this.validateAccessService = validateAccessService;
    }

    /**
     * Endpoint that persist the information of an access request.
     * @param accessRequest Information of access request
     * @return Response entity with the status and body generated by request
     * @throws javax.mail.MessagingException Error ocurred while send mail
     * notification.
     */
    @ApiOperation(value = "Endpoint that persist the information of an access"
            + " request", response = AccessRequestDto.class)
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "The information of access request"
                + " was persisted successfully"),
        @ApiResponse(code = 400, message = "The information of access request"
                + " is invalid")
    })
    @PostMapping()
    public ResponseEntity<AccessRequestDto> saveRequestAccess(
            @ApiParam(value = "Information of access request", required = true)
            @RequestBody AccessRequestDto accessRequest) throws MessagingException {
        return new ResponseEntity<>(accessRequestService.saveRequestAccess(
                accessRequest), HttpStatus.CREATED);
    }

    /**
     * Endpoint that update the information of a specific access request.
     * @param token Access token
     * @param userId User identifier associated to access token
     * @param accessRequestId Identifier of the access request
     * @param accessRequest Updated information of the access request
     * @return Response entity with the updated information of the access request
     * @throws javax.mail.MessagingException Error ocurred while send mail notification
     */
    @ApiOperation(value = "Endpoint that update the information of a specific"
            + " access request", response = AccessRequestDto.class)
    @ApiResponses(value = {
        @ApiResponse(code = 202, message = "The information of the access"
                + " request was updated successfully"),
        @ApiResponse(code = 401, message = "Request not authenticated"),
        @ApiResponse(code = 400, message = "The identifier provided by path"
                + " param mismatch with the identifier that is inside the"
                + " information or the information of access request is invalid")
    })
    @PutMapping("/{accessRequestId}")
    public ResponseEntity<AccessRequestDto> updateRequestAccess(
            @RequestHeader(value = "authorization-token", required = false) String token,
            @RequestHeader(value = "authorization-user", required = false) Integer userId,
            @ApiParam(value = "Identifier of the access request", required = true)
            @PathVariable("accessRequestId") int accessRequestId,
            @ApiParam(value = "Updated information of the access request",
                    required = true) @RequestBody AccessRequestDto accessRequest)
            throws MessagingException {
        validateAccessService.validateAccess(token, userId);
        return new ResponseEntity<>(accessRequestService.updateRequestAccess(
                accessRequestId, accessRequest), HttpStatus.ACCEPTED);
    }

    /**
     * Apply filter on access request by params selected.
     * @param token Access token
     * @param userId User identifier associated to access token
     * @param name Name of the user that request the access
     * @param company Name of company or entity associated to request
     * @param email Email of the user that request the access
     * @param layername Layer name associated to request
     * @param layeraccessgranted Layer access granted value filter
     * @param page Page number
     * @param size Records size for page
     * @return Response entity with the access requests that matching with the
     * parameters value
     */
    @ApiOperation(value = "Apply filter on access request by params selected",
            response = PaginatorDto.class)
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "The filter was applied on access"
                + " request successfully"),
        @ApiResponse(code = 401, message = "Request not authenticated"),
    })
    @GetMapping()
    public ResponseEntity<PaginatorDto> filterAccessRequest(
            @RequestHeader(value = "authorization-token", required = false) String token,
            @RequestHeader(value = "authorization-user", required = false) Integer userId,
            @ApiParam(value = "Name of the user that request the access")
            @RequestParam(value = "name", required = false) String name,
            @ApiParam(value = "Name of company or entity associated to request")
            @RequestParam(value = "company", required = false) String company,
            @ApiParam(value = "Email of the user that request the access")
            @RequestParam(value = "email", required = false) String email,
            @ApiParam(value = "Layer name associated to request")
            @RequestParam(value = "layername", required = false) String layername,
            @ApiParam(value = "Layer access granted associated to request")
            @RequestParam(value = "access_granted", required = false) Integer layeraccessgranted,
            @ApiParam(value = "Page number", defaultValue = "0")
            @RequestParam(value = "page", defaultValue = "0") int page,
            @ApiParam(value = "Page size", defaultValue = "10")
            @RequestParam(value = "size", defaultValue = "10") int size) {
        validateAccessService.validateAccess(token, userId);
        return new ResponseEntity<>(accessRequestService.filterAccessRequests(
                name, company, email, layername, layeraccessgranted, page,
                size), HttpStatus.OK);
    }
    
    /**
     * Export on excel file on access request by params selected.
     * @param token Access token
     * @param userId User identifier associated to access token
     * @param name Name of the user that request the access
     * @param company Name of company or entity associated to request
     * @param email Email of the user that request the access
     * @param layername Layer name associated to request
     * @param layeraccessgranted Layer access granted value filter
     * @param response Response instance
     */
    @ApiOperation(value = "Export on excel file on access request by params"
            + " selected")
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "The filter was applied on access"
                + " request successfully"),
        @ApiResponse(code = 401, message = "Request not authenticated"),
    })
    @GetMapping("/export-excel")
    public void exportExcelAccessRequest(
            @RequestHeader(value = "authorization-token", required = false) String token,
            @RequestHeader(value = "authorization-user", required = false) Integer userId,
            @ApiParam(value = "Name of the user that request the access")
            @RequestParam(value = "name", required = false) String name,
            @ApiParam(value = "Name of company or entity associated to request")
            @RequestParam(value = "company", required = false) String company,
            @ApiParam(value = "Email of the user that request the access")
            @RequestParam(value = "email", required = false) String email,
            @ApiParam(value = "Layer name associated to request")
            @RequestParam(value = "layername", required = false) String layername,
            @ApiParam(value = "Layer access granted associated to request")
            @RequestParam(value = "access_granted", required = false) Integer layeraccessgranted,
            @ApiParam(value = "Response instance", hidden = true)
                    HttpServletResponse response) throws IOException {
        validateAccessService.validateAccess(token, userId);
        response.setContentType("application/octet-stream");
        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd_HH:mm:ss");
        String currentDateTime = dateFormatter.format(new Date());
        String headerKey = "Content-Disposition";
        String headerValue = "attachment; filename=accessos_" + currentDateTime + ".xlsx";
        response.setHeader(headerKey, headerValue);
        ExcelExporter excelExporter = accessRequestService
                .exportExcelAccessRequest(name, company, email, layername,
                        layeraccessgranted);
        excelExporter.export(response);
    }

    
    /**
     * Export on pdf file on access request by params selected.
     * @param token Access token
     * @param userId User identifier associated to access token
     * @param name Name of the user that request the access
     * @param company Name of company or entity associated to request
     * @param email Email of the user that request the access
     * @param layername Layer name associated to request
     * @param layeraccessgranted Layer access granted value filter
     * @param response Response instance
     */
    @ApiOperation(value = "Export on pdf file on access request by params"
            + " selected")
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "The filter was applied on access"
                + " request successfully"),
        @ApiResponse(code = 401, message = "Request not authenticated"),
    })
    @GetMapping("/export-pdf")
    public void exportPdfAccessRequest(
            @RequestHeader(value = "authorization-token", required = false) String token,
            @RequestHeader(value = "authorization-user", required = false) Integer userId,
            @ApiParam(value = "Name of the user that request the access")
            @RequestParam(value = "name", required = false) String name,
            @ApiParam(value = "Name of company or entity associated to request")
            @RequestParam(value = "company", required = false) String company,
            @ApiParam(value = "Email of the user that request the access")
            @RequestParam(value = "email", required = false) String email,
            @ApiParam(value = "Layer name associated to request")
            @RequestParam(value = "layername", required = false) String layername,
            @ApiParam(value = "Layer access granted associated to request")
            @RequestParam(value = "access_granted", required = false) Integer layeraccessgranted,
            @ApiParam(value = "Response instance", hidden = true)
                    HttpServletResponse response) throws IOException {
        validateAccessService.validateAccess(token, userId);
        response.setContentType("application/pdf");
        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd_HH:mm:ss");
        String currentDateTime = dateFormatter.format(new Date());
        String headerKey = "Content-Disposition";
        String headerValue = "attachment; filename=accessos_" + currentDateTime + ".pdf";
        response.setHeader(headerKey, headerValue);
        PdfExporter pdfExporter = accessRequestService
                .exportPdfAccessRequest(name, company, email, layername,
                        layeraccessgranted);
        pdfExporter.export(response);
    }
}
